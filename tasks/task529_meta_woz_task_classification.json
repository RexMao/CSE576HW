{
    "Contributors": [
        "Wen-Jui Mao"
    ],
    "Source": [
        "meta_woz"
    ],
    "Categories": [
        "Classification"
    ],
    "Definition": "In this task, you are given two sentences: a bot task sentence and a user task sentence. Your job is to classify given sentences into one of the 47 different domains",
    "Positive Examples": [
        {
            "input": "Bot's task: Help the user with their pizza order \nUser's task: Ask the bot for three different pizzas",
            "output": "ORDER_PIZZA",
            "explanation": "According to the descriptions of the two tasks, we can know that the type of task is ORDER_PIZZA"
        },
        {
            "input": "Bot's task: Help the user create a new playlist \nUser's task: Create a new workout playlist with help from your bot",
            "output": "EDIT_PLAYLIST",
            "explanation": "The word about playlist appears in both task sentences, so the categories of the two sentences are EDIT_PLAYLIST"
        },
        {
            "input": "Bot's task: Offer the user three two bedroom apartments in the downtown area \nUser's task: Ask the bot to find you a 2 bedroom apartment in the downtown area",
            "output": "APARTMENT_FINDER",
            "explanation": "These two sentences are about finding an apartment, so the answer is APARTMENT_FINDER"
        }
    ],
    "Negative Examples": [
        {
            "input": "Bot's task: inform the user that one of the ingredients they are asking for is unavailable \nUser's task: Ask for a pizza with three different toppings",
            "output": "UPDATE_CALENDAR",
            "explanation": "According to the descriptions of the two tasks, we can know that the type of task is ORDER_PIZZA, but the answer gives us UPDATE_CALENDAR, so this is a wrong example"
        },
        {
            "input": "Bot's task: Tell the user that there isn't any room at their first choice of restaurant. If the user then provides an alternate choice, make the reservation for them \nUser's task: You and fifteen business partners need to book a few tables for tonight at a fancy restaurant",
            "output": "APARTMENT_FINDER",
            "explanation": "These two sentences of the task is about ordering restaurants, the answer should be wrong."
        },
        {
            "input": "Bot's task: Tell the user that you are a bot designed to clarify rules, not controls, and suggest they look for some kind of GAME_CONTROLS bot \nUser's task: Ask the bot what button you have to press to Jump in Super Mario 64",
            "output": "PLAY_TIMES",
            "explanation": "These two quests are about the rules of the game and not the game time, so this is a negative example"
        }
    ],
    "Instances": [
        {
            "input": "Bot's task: Schedule the user's meeting request \nUser's task:  You have a meeting saved for March 24th. Ask the chatbot to delete the meeting",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task: Before fulfilling the user's request, ask them to clarify which meeting they are talking about. \nUser's task:  You have a meeting saved for March 24th. Ask the chatbot to move the meeting to March 30th",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task:  Inform the user that the new meeting they're trying to schedule conflicts with an existing meeting \nUser's task: You have a meeting saved for March 24th. Ask the chatbot to add the time \"8:00 am\" to the meeting",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task:  Inform the user that the room they are trying to schedule for their meeting is already booked and suggest a different room \nUser's task: You have a meeting saved for March 24th. Ask the chatbot to add the location \"Birch room\" to the meeting",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task: Schedule the user's meeting request \nUser's task: You have a meeting saved for March 24th. Ask the chatbot to title the meeting \"Nomination Discussion\"",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task: Schedule the user's meeting request \nUser's task: Ask the chatbot to schedule a meeting for March 24th",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task: Ask the user to specify which meeting they want to be reminded about \nUser's task: Ask the chatbot to remind you about a meeting three days before it takes place",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task: Ask the user to specify which week they are asking about \nUser's task: Ask the chatbot to cancel all your meetings for next week",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the 9:00 meeting is in the Birch room \nUser's task: Ask where your 9:00 meeting is",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the 9:00 meeting has been cancelled \nUser's task: Ask where your 9:00 meeting is",
            "output": [
                "UPDATE_CALENDAR"
            ]
        },
        {
            "input": "Bot's task: Help the user with their pizza order \nUser's task: Ask the bot for three different pizzas",
            "output": [
                "ORDER_PIZZA"
            ]
        },
        {
            "input": "Bot's task: inform the user that one of the ingredients they are asking for is unavailable \nUser's task: Ask for a pizza with three different toppings",
            "output": [
                "ORDER_PIZZA"
            ]
        },
        {
            "input": "Bot's task: Inform the user that the topping they are asking for is unavailable \nUser's task: Ask if a certain pizza topping is available",
            "output": [
                "ORDER_PIZZA"
            ]
        },
        {
            "input": "Bot's task: Tell the user when the movie is playing on Friday night \nUser's task: Ask the bot for the movie times for a movie on Friday night",
            "output": [
                "MOVIE_LISTINGS"
            ]
        },
        {
            "input": "Bot's task: Inform the user that there aren't any seats available to reserve \nUser's task: You want to reserve seats at a theatre",
            "output": [
                "EVENT_RESERVE"
            ]
        },
        {
            "input": "Bot's task: Help the user get tickets to the game \nUser's task: You want to make sure you and your four friends have tickets for the Football game this Sunday",
            "output": [
                "EVENT_RESERVE"
            ]
        },
        {
            "input": "Bot's task: Let the user know whether or not it will rain this weekend \nUser's task: Ask the bot if it is going to rain this weekend",
            "output": [
                "WEATHER_CHECK"
            ]
        },
        {
            "input": "Bot's task: Tell the user the high temperature for Friday \nUser's task: Ask the bot how hot it will get on Friday",
            "output": [
                "WEATHER_CHECK"
            ]
        },
        {
            "input": "Bot's task: Inform the user that they've already added a contact under that name \nUser's task: You've just added someone's number to your phone but forgot to add in their name. Ask the bot to enter the person's name into the contact",
            "output": [
                "UPDATE_CONTACT"
            ]
        },
        {
            "input": "Bot's task: Tell the user that there isn't any room at their first choice of restaurant. If the user then provides an alternate choice, make the reservation for them \nUser's task: You and fifteen business partners need to book a few tables for tonight at a fancy restaurant",
            "output": [
                "MAKE_RESTAURANT_RESERVATIONS"
            ]
        },
        {
            "input": "Bot's task: Clarify which playlist the user wants to retitle and what they want to change the title to \nUser's task: Ask the bot to retitle your playlist",
            "output": [
                "EDIT_PLAYLIST"
            ]
        },
        {
            "input": "Bot's task: Help the user create a new playlist \nUser's task: Create a new workout playlist with help from your bot",
            "output": [
                "EDIT_PLAYLIST"
            ]
        },
        {
            "input": "Bot's task: Tell the customer how tall the celebrity is \nUser's task: You want to know how tall a celebrity is",
            "output": [
                "LOOK_UP_INFO"
            ]
        },
        {
            "input": "Bot's task: Tell the user you don't have the information they are asking for \nUser's task: Ask the bot a question about common world knowledge",
            "output": [
                "LOOK_UP_INFO"
            ]
        },
        {
            "input": "Bot's task: Clarify which bicycle helmet the user wants to order \nUser's task: You are trying to buy a bicycle helmet from a sporting goods website",
            "output": [
                "SHOPPING"
            ]
        },
        {
            "input": "Bot's task: Walk the user through the returns process \nUser's task: You want to return a defective bicycle helmet to a sporting goods website",
            "output": [
                "SHOPPING"
            ]
        },
        {
            "input": "Bot's task: Inform the user that the store does not give refunds or accept returned goods \nUser's task: You want to return a defective bicycle helmet to a sporting goods website. If the bot refuses to refund you, argue with it",
            "output": [
                "SHOPPING"
            ]
        },
        {
            "input": "Bot's task: Either tell the user their coupon has expired or that it doesn't apply to the product they are trying to buy \nUser's task: Try to buy something from an online store using a coupon code",
            "output": [
                "SHOPPING"
            ]
        },
        {
            "input": "Bot's task: Tell the customer that their order will be shipped in three days, but tell them you don't know how long it will take to arrive \nUser's task: Order something from the store and ask how long it should take to arrive",
            "output": [
                "SHOPPING"
            ]
        },
        {
            "input": "Bot's task: Tell the customer if the store they are asking about is open or not \nUser's task: You want to know if a sporting goods store is open at 9 am",
            "output": [
                "STORE_DETAILS"
            ]
        },
        {
            "input": "Bot's task: fulfill the user's request \nUser's task: You'd like a list of nearby pet stores",
            "output": [
                "STORE_DETAILS"
            ]
        },
        {
            "input": "Bot's task: Try to upsell the user by offering a deal \nUser's task: You want to buy one mousetrap ",
            "output": [
                "STORE_DETAILS"
            ]
        },
        {
            "input": "Bot's task: fulfill the user's request \nUser's task: You are staying in a hotel in a different city and would like to locate the closest branch of your bank",
            "output": [
                "STORE_DETAILS"
            ]
        },
        {
            "input": "Bot's task: Give the user the score of the football game \nUser's task: Ask the bot for information about a football game",
            "output": [
                "SPORTS_INFO"
            ]
        },
        {
            "input": "Bot's task: Provide the user with inspiring quotes from celebrities \nUser's task: You are having a horrible week and would like some inspiring quotes",
            "output": [
                "QUOTE_OF_THE_DAY_BOT"
            ]
        },
        {
            "input": "Bot's task: Satisfy the user's request \nUser's task: You want to know how to open a childproof bottle of medicine",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Satisfy the user's request but remind them to take safety precautions \nUser's task: You want to know how to make a boiled egg",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Help the user with their request \nUser's task: Ask how to set up an account on a social media site",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Let the user know that the request they have asked for is too complicated to help with \nUser's task: Ask the bot how to design a website",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Comply with the user's request \nUser's task: Ask the bot how to search for something on an online search engine, and insist on very very detailed answers",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Tell the user that you are legally obligated not to fulfil their request \nUser's task: Ask how to make a fire",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Tell the user how to interact with you \nUser's task: Ask the bot how you are supposed to interact with it",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: direct the user to some omelette recipes \nUser's task: Ask the bot how to cook an omelette. If the bot shows you recipes, insist that it tell you how to make the omelette directly",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Help the user with their request and reassure them if they seem doubtful \nUser's task: Ask the bot how to order a pizza over the phone and be skeptical of its answers",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Inform the user that they've made an impossible request \nUser's task: Ask the bot how to build a time machine",
            "output": [
                "HOW_TO_BASIC"
            ]
        },
        {
            "input": "Bot's task: Ask the user what type of party they want the conversation starter for, and then provide an appropriate conversation starter \nUser's task: Ask for an interesting conversation starter for a party",
            "output": [
                "PROMPT_GENERATOR"
            ]
        },
        {
            "input": "Bot's task: Check if the user lives in the same town as the library. If they do not, inform them that a membership card will cost 75 dollars monthly. \nUser's task: You want to know if you can apply for membership. If prompted, reveal that you do not live in the same town as the library",
            "output": [
                "LIBRARY_REQUEST"
            ]
        },
        {
            "input": "Bot's task: Refuse to erase the user's late fees. If they get aggressive, add 25 cents to their fees \nUser's task: You have $800 in late fees. Try to get your debt erased",
            "output": [
                "LIBRARY_REQUEST"
            ]
        },
        {
            "input": "Bot's task: Tell the user that their book is in, and offer to reserve it for them \nUser's task: Ask if a book is in",
            "output": [
                "LIBRARY_REQUEST"
            ]
        },
        {
            "input": "Bot's task: Tell the user you do not recognize the book they are asking about \nUser's task: Ask if a book is in",
            "output": [
                "LIBRARY_REQUEST"
            ]
        },
        {
            "input": "Bot's task: fulfill the user's request \nUser's task: Ask how much late fees you currently owe",
            "output": [
                "LIBRARY_REQUEST"
            ]
        },
        {
            "input": "Bot's task: Inform the user that there is a 5 cent charge per online renewal, and that they already owe 175 dollars in late fees \nUser's task: Try to renew some books you currently have on loan",
            "output": [
                "LIBRARY_REQUEST"
            ]
        },
        {
            "input": "Bot's task: Inform the user that the library does not accept cash for late fees, only credit. If the user gets belligerent, begin increasing their fees by 25 cents \nUser's task: Tell the bot that you will be paying your late fees in cash. Argue if the bot says they only take credit",
            "output": [
                "LIBRARY_REQUEST"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request \nUser's task: Try to put money from your chequing account into your savings account",
            "output": [
                "BANK_BOT"
            ]
        },
        {
            "input": "Bot's task: Look up and provide a highly rated italian restaurant in denver, but first try to get the user to tell you what they will be ordering there \nUser's task: Look for a Italian restaurant in Denver",
            "output": [
                "RESTAURANT_PICKER"
            ]
        },
        {
            "input": "Bot's task: Tell the user how much data their plan provides, and then inform them that they can double the amount for only 10 dollars a month \nUser's task: You want to doublecheck how much monthly data you have on your plan",
            "output": [
                "PHONE_PLAN_BOT"
            ]
        },
        {
            "input": "Bot's task: Ask what kind of boat the user has bought, and then suggest names for it \nUser's task: You have just bought a boat and want a name for it",
            "output": [
                "NAME_SUGGESTER"
            ]
        },
        {
            "input": "Bot's task: Ask what kind of pet the user has adopted, and then suggest names for it \nUser's task: You have just adopted a pet and want a name for it. Disagree with the first few of the bot's suggestions",
            "output": [
                "NAME_SUGGESTER"
            ]
        },
        {
            "input": "Bot's task: Inform the user that the tallest building in Denver is the Republis Plaza \nUser's task: Ask what the tallest building in Denver, Colorado is",
            "output": [
                "CITY_INFO"
            ]
        },
        {
            "input": "Bot's task: Provide the user with the information they request \nUser's task: Ask what the average life expectancy in Denver is",
            "output": [
                "CITY_INFO"
            ]
        },
        {
            "input": "Bot's task: Provide the user with the information they request \nUser's task: Ask what river the city of Montreal is on",
            "output": [
                "CITY_INFO"
            ]
        },
        {
            "input": "Bot's task: Provide the user with the information they request \nUser's task: Ask what river goes through Prague",
            "output": [
                "CITY_INFO"
            ]
        },
        {
            "input": "Bot's task: Ask the user to narrow down their request a little \nUser's task: Ask the bot to compare LA and New York City",
            "output": [
                "CITY_INFO"
            ]
        },
        {
            "input": "Bot's task: Provide the user with multiple answers \nUser's task: Ask who founded Rome",
            "output": [
                "CITY_INFO"
            ]
        },
        {
            "input": "Bot's task: Give the user some music suggestions without first asking them what they like \nUser's task: Ask the bot for music suggestions without telling it what you like",
            "output": [
                "MUSIC_SUGGESTER"
            ]
        },
        {
            "input": "Bot's task: Provide suggestions, even if the user doesn't ask for them (or tells you they don't need any) \nUser's task: Tell the bot that you like a certain genre of music, but don't prompt it to give you suggestions",
            "output": [
                "MUSIC_SUGGESTER"
            ]
        },
        {
            "input": "Bot's task: Agree with the user \nUser's task: Make a blatantly false statement",
            "output": [
                "AGREEMENT_BOT"
            ]
        },
        {
            "input": "Bot's task: Try to get the user to ask you specific questions \nUser's task: Ask the bot how to care for a dog. Try to remain vague in the first couple of turns.",
            "output": [
                "PET_ADVICE"
            ]
        },
        {
            "input": "Bot's task: Answer the user's query \nUser's task: Ask the bot how much space you need in your apartment for a pet cat",
            "output": [
                "PET_ADVICE"
            ]
        },
        {
            "input": "Bot's task: Offer the user three two bedroom apartments in the downtown area \nUser's task: Ask the bot to find you a 2 bedroom apartment in the downtown area",
            "output": [
                "APARTMENT_FINDER"
            ]
        },
        {
            "input": "Bot's task: Answer the user's query \nUser's task: Ask who the world's tallest man is",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Answer the user's query \nUser's task: Ask where Georgia is",
            "output": [
                "GEOGRAPHY"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the place they are looking for doesn't seem to exist, and suggest alternatives \nUser's task: Ask where Atlantis is",
            "output": [
                "GEOGRAPHY"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the place they are looking for doesn't seem to exist, and suggest alternatives \nUser's task: Ask where Never Never Land is",
            "output": [
                "GEOGRAPHY"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request. If they ask about an alarm set for seven thirty, remind them that they set that alarm for eight. \nUser's task: You want to change some of the alarm settings (sound/vibrate, which sound, etc) of the alarm you set for eight pm. At the start of the dialogue, say seven thirty pm instead of eight, and let the bot correct you",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: If the user asks to change their alarm to vibrate, confirm whether or not they still want it to make a sound as well. If they do want a sound, ask them to confirm what sound they want \nUser's task: You want to change your ten thirty alarm to eleven thirty, and you want to set it to vibrate",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: Try to get as many details as possible about the alarm the user wants to set (sound/vibrate, what sound it will make, when it should go off, what days it should go off, what it should be called, etc) \nUser's task: Set an alarm",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: When the user asks to delete an alarm, inform them that there are several alarms by that name, and ask which one the user wants to delete \nUser's task: Delete an alarm",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: Ask what type of sound the user wants to set their alarm to make \nUser's task: Change an alarm setting from Vibrate to Make Sound",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: Specify what range of days the user wants the new alarm to apply to \nUser's task: Ask the bot to copy an alarm and apply it to the rest of the week.",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request, but ask if they would like to change the name for their alarm \nUser's task: Move an alarm from three\u00a0on Monday to four on Friday",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request, and ask if they want to apply the change to several similarly named alarms set for later in the week \nUser's task: Rename your ten thirty alarm from 'Walk Dog' to 'Feed Cat'",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: The user will ask to cancel all their alarms. Remind them that they have set five alarms for the next week, and, if prompted, go through them one by one \nUser's task: Cancel all your alarms for the next week. Ask the bot to list them before cancelling them",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's requests. If they ask for multiple alarms, check that they want the same alarm settings (sound/vibrate, which sound, etc) for each one \nUser's task: You want to set several alarms at regular intervals between six am and eight am",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: Ask as many questions about the new contact as possible \nUser's task: Add a new contact",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: After the user adds their new contact, tell them there's already a contact by that name in their contacts \nUser's task: Add a new contact and supply the bot with as many details as you can about them",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: once the user changes the phone number, ask them if they'd also like to change the email address \nUser's task: Change a contact's phone number",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request \nUser's task: Try to change the name of a contact",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: Make sure the user definitely wants to erase the contact \nUser's task: Erase a contact",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request, but inform them that if you do so, the current contact will not have any phone numbers associated with them \nUser's task: Delete a phone number from a contact",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: Inform the user that you currently only support one email address per contact, and ask if they'd like to erase the contact's current email address or create a new contact for the email they are trying to add \nUser's task: Try to add an email address to a contact that already has an email address",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the contact already has a phone number, and confirm that the user wants to add a second one \nUser's task: Add a second phone number to a contact",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: Warn the user that turning on do not disturb will disable all currently set alarms and notifications, and then confirm if they still want to turn on do not distrurb \nUser's task: Try to turn on do not disturb mode",
            "output": [
                "PHONE_SETTINGS"
            ]
        },
        {
            "input": "Bot's task: Confirm that the user wants to set their phone to vibrate and not to vibrate plus ringtone \nUser's task: Set your phone to vibrate",
            "output": [
                "PHONE_SETTINGS"
            ]
        },
        {
            "input": "Bot's task: Get the precise day and hour of the appointment being set by the user. After this, try and see if you can also get the address for the dentist's office they will be visiting \nUser's task: You want to set a reminder for a dentist's appointment a few weeks from today",
            "output": [
                "APPOINTMENT_REMINDER"
            ]
        },
        {
            "input": "Bot's task: Make sure the user definitely wants to erase the appointment \nUser's task: Ask the bot to erase the appointment you set for next tuesday at 2:00",
            "output": [
                "APPOINTMENT_REMINDER"
            ]
        },
        {
            "input": "Bot's task: Confirm the date of the appointment \nUser's task: Ask the bot to remind you about an appointment set for a week from today",
            "output": [
                "APPOINTMENT_REMINDER"
            ]
        },
        {
            "input": "Bot's task: Ask the user what music they want to listen to \nUser's task: Ask the bot to turn on some music",
            "output": [
                "HOME_BOT"
            ]
        },
        {
            "input": "Bot's task: Ask the user what heat they want and confirm which room they want heated \nUser's task: Ask the bot to turn the heat up",
            "output": [
                "HOME_BOT"
            ]
        },
        {
            "input": "Bot's task: Ask the user to specify which doors they are asking about \nUser's task: Ask the bot to doublecheck that the doors are locked",
            "output": [
                "HOME_BOT"
            ]
        },
        {
            "input": "Bot's task: Tell the user what the current house temperature is, and then ask them if they would like to modify it. \nUser's task: Ask the bot what the current house temperature is set to",
            "output": [
                "HOME_BOT"
            ]
        },
        {
            "input": "Bot's task: Inform the user of the current room temperature, and then confirm if they want to change it \nUser's task: Ask the bot to make the room warmer",
            "output": [
                "HOME_BOT"
            ]
        },
        {
            "input": "Bot's task: Specify in which room the user wants the lights dimmed \nUser's task: Ask the bot to dim the lights",
            "output": [
                "HOME_BOT"
            ]
        },
        {
            "input": "Bot's task: Tell the user the company provides health insurance after the employee has been employed for six months \nUser's task: Ask whether or not the company provides health insurance",
            "output": [
                "POLICY_BOT"
            ]
        },
        {
            "input": "Bot's task: Inform the users that animals are forbidden at work unless they are service animals \nUser's task: Ask what the company's policy on bringing animals into the office is",
            "output": [
                "POLICY_BOT"
            ]
        },
        {
            "input": "Bot's task: Decide whether to encourage or discourage the user \nUser's task: Ask the bot whether or not you should go to the party",
            "output": [
                "DECIDER_BOT"
            ]
        },
        {
            "input": "Bot's task: Pick one of the user's options \nUser's task: Ask the bot if you should go to an Italian restaurant or a Japanese restaurant",
            "output": [
                "DECIDER_BOT"
            ]
        },
        {
            "input": "Bot's task: Tell the user the book they are looking for is on loan and suggest an online copy \nUser's task: Ask the bot if the book you are looking for at the library is currently on loan",
            "output": [
                "CATALOGUE_BOT"
            ]
        },
        {
            "input": "Bot's task: Tell the user that most ski hills will be closed next weekend \nUser's task: You want to know if next weekend will have good skiing weather",
            "output": [
                "SKI_BOT"
            ]
        },
        {
            "input": "Bot's task: Tell the user that there are no ski hills in their immediate location \nUser's task: You want to know if there are good ski hills an hour's drive from your current location",
            "output": [
                "SKI_BOT"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request \nUser's task: Ask for the closest available ski hill",
            "output": [
                "SKI_BOT"
            ]
        },
        {
            "input": "Bot's task: Ask the user which bus and which stop they're at, and then tell them that the next bus will be coming in a half hour \nUser's task: You've missed your bus and would like to know when the next one comes. Don't provide any info about which bus it is until prompted by the bot",
            "output": [
                "BUS_SCHEDULE_BOT"
            ]
        },
        {
            "input": "Bot's task: Inform the user that the bus stop they are asking about has been moved two blocks north \nUser's task: Ask if a certain bus stop is currently operational",
            "output": [
                "BUS_SCHEDULE_BOT"
            ]
        },
        {
            "input": "Bot's task: Inform the user that the subways will start at 6 am \nUser's task: Ask when the subway will start running ",
            "output": [
                "BUS_SCHEDULE_BOT"
            ]
        },
        {
            "input": "Bot's task: Verify which subway station the user wants to go to. Once that is confirmed, inform them that the subway stopped running ten minutes ago and will start again at 5:45 am \nUser's task: Check to see if the subways are still running",
            "output": [
                "BUS_SCHEDULE_BOT"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request \nUser's task: Try to find out which subway station is closest to your current location",
            "output": [
                "BUS_SCHEDULE_BOT"
            ]
        },
        {
            "input": "Bot's task: Tell the user their policy does not cover water damage \nUser's task: You want to know if the policy you own covers water damage",
            "output": [
                "INSURANCE"
            ]
        },
        {
            "input": "Bot's task: tell the user that they currently do not have a health insurance plan \nUser's task: Ask what your health insurance premium is",
            "output": [
                "INSURANCE"
            ]
        },
        {
            "input": "Bot's task: Ask the user to specify which insurance plan they are asking about \nUser's task: Ask the bot how much you're insured for",
            "output": [
                "INSURANCE"
            ]
        },
        {
            "input": "Bot's task: Tell the user they will have to make an appointment with their insurance broker \nUser's task: Ask the bot how you can go about changing the terms of your life insurance policy",
            "output": [
                "INSURANCE"
            ]
        },
        {
            "input": "Bot's task: Tell the user their current policy covers damage caused by water, fire, and acts of god \nUser's task: Ask what your current policy covers",
            "output": [
                "INSURANCE"
            ]
        },
        {
            "input": "Bot's task: Ask the user to elaborate as much as possible about the movie they are asking about, and then suggest they're thinking of Lord of the Rings \nUser's task: Describe a movie where these guys have to climb a mountain and then throw a thing into the mountain and ask the bot if they know what the movie is called.",
            "output": [
                "WHAT_IS_IT"
            ]
        },
        {
            "input": "Bot's task: Suggest to the user that they're thinking of 'Party all the time' by Eddie Murphy  \nUser's task: Ask what that song about the guy complaining about his girlfriend partying all the time is called",
            "output": [
                "WHAT_IS_IT"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the only book you can think of that matches their description is Moby Dick \nUser's task: Ask the bot if they know what that book about whale hunting was called. Insist that you're not thinking about Moby Dick",
            "output": [
                "WHAT_IS_IT"
            ]
        },
        {
            "input": "Bot's task: Do what the user asks you to do \nUser's task: Ask the bot to sort every member of the Beatles by date of birth",
            "output": [
                "AUTO_SORT"
            ]
        },
        {
            "input": "Bot's task: Do what the user asks you to do \nUser's task: Name three cities and ask the bot to sort them from closet to Chicago to furthest from Chicago",
            "output": [
                "AUTO_SORT"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the email address they have provided you comes from a known scam website \nUser's task: Tell the bot you got an email from scams@fakewebsite.com and ask them if the email is a scam",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the number they have provided has come from a known scammer \nUser's task: Tell the bot you've been receiving calls from the number 555-7225. If the bot confirms that this caller is a scammer, ask the bot what you should do about it.",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Tell the user to be suspicious of image attachments from unknown numbers \nUser's task: Tell the bot you've been receiving texts from 555-7325 with suspicious image attachments. If the bot tells you to be suspicious, inform them that 555-7325 is the phone number of a trusted friend",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Tell the user they should not click links in texts sent from unknown numbers \nUser's task: Ask the bot if you should click the link in a text message sent to you from an unknown number",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Inform the user that you can't find any evidence of scams attached to the name Tony Emailerson, but that the user should be wary of unsolicited emails from unfamiliar numbers or people \nUser's task: Ask if an email from someone calling themselves Tony Emailerson is untrustworthy",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Fulfill the user's request \nUser's task: Tell the bot you are in New York, it's 6 pm, and you need to know what time it is in Iceland",
            "output": [
                "TIME_ZONE"
            ]
        },
        {
            "input": "Bot's task: Fulfill the user's request \nUser's task: Ask the bot what time it will be in Vancouver when it's midnight in St. Petersburg",
            "output": [
                "TIME_ZONE"
            ]
        },
        {
            "input": "Bot's task: Tell the user you can only calculate the times in different time zones, not provide information on how they work \nUser's task: Ask the bot how time zones work",
            "output": [
                "TIME_ZONE"
            ]
        },
        {
            "input": "Bot's task: Fulfill the user's request \nUser's task: Ask the bot how many hours New York is ahead of Winnipeg",
            "output": [
                "TIME_ZONE"
            ]
        },
        {
            "input": "Bot's task: Ask the user if they mean the tallest living person or the tallest person of all time \nUser's task: Ask who the tallest person in the world is",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Provide the user with the information \nUser's task: Ask who the oldest person of all time was",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Ask the user to specify if they mean the biggest individual snake or the biggest type of snake \nUser's task: Ask what the biggest snake ever was",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "INSURANCE"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "WHAT_IS_IT"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "AUTO_SORT"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the most likely scenario is that the person they have matched up with is a scammer \nUser's task: Tell the bot that you recently matched with someone on a dating site who was using a picture of yourself as their profile picture",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the people calling them are scammers \nUser's task: Ask why you're getting phone calls from people saying they're from Microsoft tech support",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Tell the user the pop up is almost definitely not legitimate \nUser's task: Tell the bot that you just got a pop up for a free iPod, but you suspect that all is not as it seems",
            "output": [
                "SCAM_LOOKUP"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "TIME_ZONE"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Provide some variations of answers to the user's question: things like best selling record in the US vs best selling in the world, best selling single versus best selling album, etc. \nUser's task: Askl what the best selling record of all time is",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Fulfill the request \nUser's task: Ask what the deepest point on earth is",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Fulfill the request \nUser's task: Ask where the tallest indoor waterfall is located, and then ask where the tallest waterfall is",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Fulfill the request \nUser's task: Ask what the loudest recorded sound was",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Fulfill the request \nUser's task: Ask about various olympic sports records",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Tell the user that their request is too vague \nUser's task: Ask what the longest thing in the world is",
            "output": [
                "GUINESS_CHECK"
            ]
        },
        {
            "input": "Bot's task: Tell the user there are three plays playing at the time they requested: Julius Caesar, Hamlet, and Pygmalion \nUser's task: Ask if there are any shows at nine o clock, July 15th",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that Oklahoma is playing at the\\u00a0Bill P Memorial auditorium, and that a production of Of Mice and Men will follow it. if the user asks, tell them Oklahoma will be starting at 2 pm \nUser's task: Ask what theatre Oklahoma is playing at, and if there are any shows afterwards. After you get this info, ask for the showtime for Oklahoma",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Clarify if the user meant The Cocktail Party or The Birthday Party or\\u00a0The Dinner Party, the table reading of The Party, or Abigail's party. Whatever play the user picks, tell them it plays at 9:30 PM. Before saying goodbye, remind the user that\\u00a0the Chicago 'Parties in Drama' festival relies on donations to stay running, and ask the user if they'd like to donate\\u00a0 \nUser's task: Ask when that play about the\\u00a0party is playing and where. If the bot gives you a choice of plays, pick one.",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Tell the user the secret Miracle is scheduled for 8 PM Saturday \nUser's task: Ask when the opening night for The Secret Miracle is",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that there are no plays happening at the George F theatre until 7:30, but that there is a improv class being taught there from 2-4pm. If the user asks, tell them you don't know if the workshop is open to the public or free \nUser's task: Ask if anything is happening at the George F theatre around 3 pm",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the play is playing at the Menard University auditorium at  8 PM \nUser's task: Ask if The Enemies is playing at the Hladik memorial theatre",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Tell the user when the play will be running over the next week \nUser's task: Ask the play times for Caesar and Cleopatra",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the play they're asking for\\u00a0will be playing at noon \nUser's task: Ask if The Waltz Invention is playing tonight",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the two plays they're asking about are playing at the same time today, but that tomorrow, Cabaret will play at 6 PM, but Phantom of the Opera starts at midnight \nUser's task: Ask if Cabaret is playing at the same time as Phantom of the Opera today",
            "output": [
                "PLAY_TIMES"
            ]
        },
        {
            "input": "Bot's task: Answer the user's request (Your answer does not need to be correct) \nUser's task: Ask if you're supposed to get $200 everytime you land on free parking in Monopoly",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that you are a bot designed to clarify rules, not controls, and suggest they look for some kind of GAME_CONTROLS bot \nUser's task: Ask the bot what button you have to press to Jump in Super Mario 64",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that you are programmed to help them play games, not win them. If the user starts talking about other games, go along with them and try to help \nUser's task: Ask how to win at the text adventure Zork. If the Bot cannot help you, ask them if what games it can help you with.",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that games of tag usually don't have a definite ending, and that players usually just get bored and stop playing. Suggest maybe the winner is the person who gets tagged the least, but don't defend this point too strongly. \nUser's task: Ask how to know who's won a game of tag. Argue with the bot when it gives you some answers.",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Inform the user that while there are no restrictions, it is generally suggested that the field of play not exceed\\u00a03.41 square kilometres (the area of Central Park) and not get any smaller than the size of an olympic swimming pool (1250 square metres).  \nUser's task: Ask the bot if there are any restrictions on the field of play in a game of tag",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Make up an answer for the user's question. If the user argues with you, don't change your answer. \nUser's task: Ask who goes first in a game of monopoly. Argue with the bot's answer, suggest it's using flawed data",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that catch is a game where two or more people toss an object, usually a ball, between themselves for an indeterminate time. \nUser's task: Ask how to play catch",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that white traditionally moves first in chess, and that there have been discussions that this gives an uneven advantage to the player playing white \nUser's task: Ask who goes first in a game of chess",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the first person to ask who's 'it', is 'it' \nUser's task: Ask the bot how to pick the first person to be 'it' in a game of tag",
            "output": [
                "GAME_RULES"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "WEDDING_PLANNER"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the pizza is en route to their house \nUser's task: Ask about that pizza you ordered 10 minutes ago",
            "output": [
                "CHECK_STATUS"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "CHECK_STATUS"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the water park will close on September 15th \nUser's task: Ask if the water park is still open in September",
            "output": [
                "CHECK_STATUS"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the McDonalds won't be open for another three months \nUser's task: Ask if the new McDonalds on Thomas street is open yet",
            "output": [
                "CHECK_STATUS"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the package was lost in transit, and remind them that you sent them an email about it \nUser's task: Ask why you haven't received a package you ordered three months ago",
            "output": [
                "CHECK_STATUS"
            ]
        },
        {
            "input": "Bot's task: Ask how the user knows the baby. If they are related to the baby, suggest wooden blocks. Otherwise, suggest a teddy bear \nUser's task: You need a good gift for a 2 year old baby",
            "output": [
                "PRESENT_IDEAS"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "PRESENT_IDEAS"
            ]
        },
        {
            "input": "Bot's task: Advise the user, but give them some bad answers first \nUser's task: Ask what to get for your spouse on their 53rd birthday. reject the first few ideas the bot gives you.",
            "output": [
                "PRESENT_IDEAS"
            ]
        },
        {
            "input": "Bot's task: Advise the user, but try to find out what their job is \nUser's task: Ask what is a suitable present to give your boss on their birthday. If the bot asks you where you work, make up an answer",
            "output": [
                "PRESENT_IDEAS"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "GEOGRAPHY"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "ALARM_SET"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "CONTACT_MANAGER"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "PHONE_SETTINGS"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "APPOINTMENT_REMINDER"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "HOME_BOT"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "POLICY_BOT"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "CATALOGUE_BOT"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "SKI_BOT"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "BUS_SCHEDULE_BOT"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "LIBRARY_REQUEST"
            ]
        },
        {
            "input": "Bot's task: Reply to the customer and try to fulfil their request. If you think the request they are making goes beyond your role, inform the user that you are not equipped to help them \nUser's task: Start a conversation based on you customerRole",
            "output": [
                "BANK_BOT"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the movie they are asking about will be playing at 7:15 and 10:45 \nUser's task: Ask when the movie 'The Day of the Big Ants' is playing in theatres near your home town. Ask the bot which theatres the movie is playing at",
            "output": [
                "MOVIE_LISTINGS"
            ]
        },
        {
            "input": "Bot's task: Tell the user that the only movies playing at their local cinema are Weekend at Bernies 2, The Godfather Part III, and a Star Wars Marathon \nUser's task: Ask what movies are playing in your local movie theatre",
            "output": [
                "MOVIE_LISTINGS"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request. \nUser's task: Ask the bot to change your contact from Mr. Smith to Dr. Smith",
            "output": [
                "UPDATE_CONTACT"
            ]
        },
        {
            "input": "Bot's task: Answer the user's question. \nUser's task: Ask the bot how many phone numbers you can associate with a single contact, and express disapointment with the bot's answer",
            "output": [
                "UPDATE_CONTACT"
            ]
        },
        {
            "input": "Bot's task: Tell the user that there is only enough space available at that restaurant for 10 \nUser's task: Try to reserve a table for 16 at an expensive restaurant",
            "output": [
                "MAKE_RESTAURANT_RESERVATIONS"
            ]
        },
        {
            "input": "Bot's task: Tell the user that Burger King does not take reservations \nUser's task: Ask the bot if you can make a reservation for two at a Burger King",
            "output": [
                "MAKE_RESTAURANT_RESERVATIONS"
            ]
        },
        {
            "input": "Bot's task: Answer the user's question. \nUser's task: It's the world cup. Ask the bot which countries are playing today",
            "output": [
                "SPORTS_INFO"
            ]
        },
        {
            "input": "Bot's task: Get the user to specify what game they're talking about, and then tell them how much time is left in it \nUser's task: Ask how much time is left in the football game",
            "output": [
                "SPORTS_INFO"
            ]
        },
        {
            "input": "Bot's task: Offer the user this quote from Albert Einstein: 'Whoever undertakes to set himself up as a judge of Truth and Knowledge is shipwrecked by the laughter of the gods. ' If the user doesn't like this one, look for some more. \nUser's task: Ask for a good quote about laughter from a famous person. If you don't like the quote you get, feel free to ask for another",
            "output": [
                "QUOTE_OF_THE_DAY_BOT"
            ]
        },
        {
            "input": "Bot's task: Offer this quote from William Makepeace Thackary: 'Bravery never goes out of fashion. ' \nUser's task: Ask for a good quote for dealing with bravery",
            "output": [
                "QUOTE_OF_THE_DAY_BOT"
            ]
        },
        {
            "input": "Bot's task: Suggest a show about friends who hang out and complain about stuff with eachother. \nUser's task: You need a prompt for\\u00a0a new TV show idea.",
            "output": [
                "PROMPT_GENERATOR"
            ]
        },
        {
            "input": "Bot's task: Give the user some writing prompts and make sure they are long winded and complicated. \nUser's task: Tell the bot you need a creative writing prompt for a short story writing competition.",
            "output": [
                "PROMPT_GENERATOR"
            ]
        },
        {
            "input": "Bot's task: Try to suggest some restaurants or types of restaurants that can accomodate the user's request \nUser's task: Try to find a restaurant that doesn't serve anything involving tomatos",
            "output": [
                "RESTAURANT_PICKER"
            ]
        },
        {
            "input": "Bot's task: Try to fulfil the user's request even if they reject your offers. \nUser's task: Tell the bot that you are looking for cheap authentic French cuisine. Reject any offers the bot makes",
            "output": [
                "RESTAURANT_PICKER"
            ]
        },
        {
            "input": "Bot's task: Tell the user that you're unable to check how much data they've used, but that you can tell them how much data is included in their plan. \nUser's task: Ask how much data you have left for this month",
            "output": [
                "PHONE_PLAN_BOT"
            ]
        },
        {
            "input": "Bot's task: Offer the user a choice of plans that fit their description. \nUser's task: Ask the bot to upgrade your plan to one that offers free calling 24/7",
            "output": [
                "PHONE_PLAN_BOT"
            ]
        },
        {
            "input": "Bot's task: Agree with the user, but point out that you can't own properties on the moon \nUser's task: Tell the Bot that you own rental properties on the Moon",
            "output": [
                "AGREEMENT_BOT"
            ]
        },
        {
            "input": "Bot's task: agree enthusiastically with the user. \nUser's task: Tell the bot that you think an agreement bot seems like a pretty useless thing to have.",
            "output": [
                "AGREEMENT_BOT"
            ]
        },
        {
            "input": "Bot's task: Suggest some studio apartments, but try to get the user interested in apartments with three or more bedrooms \nUser's task: Say you're looking for an apartment for five people but you don't mind if everyone shares one bedroom",
            "output": [
                "APARTMENT_FINDER"
            ]
        },
        {
            "input": "Bot's task: Ask the user for some extra details, but then tell them the apartments they are looking for are unavailable \nUser's task: Ask if there any Penthouse apartments in Saskatoon costing less than 1200 a month",
            "output": [
                "APARTMENT_FINDER"
            ]
        },
        {
            "input": "Bot's task: Tell the user that they are not obligate to invite children to their wedding, but that they may want to consider an adults only ceremony followed by a full family reception. \nUser's task: Ask the bot if you are obligated to invite children to your wedding, or if you can have an adults only ceremony",
            "output": [
                "WEDDING_PLANNER"
            ]
        },
        {
            "input": "Bot's task: Tell the user that there are a lot of conditions that decide the cost of a wedding, so it's impossible to say which destination will cost more. \nUser's task: Ask the bot whether a beach wedding or a private island wedding would be more expensive.",
            "output": [
                "WEDDING_PLANNER"
            ]
        },
        {
            "input": "Bot's task: Tell the user that it will be expensive to fulfil their request, but that it can be done. \nUser's task: Try to reserve a circus tent for your son's birthday party. Money is not object, but act surprised and complain when you're told the price.",
            "output": [
                "EVENT_RESERVE"
            ]
        },
        {
            "input": "Bot's task: Tell the user that thunderstorms are no longer predicted for today. \nUser's task: Ask if that thunderstorm that was supposed to happen today is still supposed to happen. When you get the answer from the bot, complain and ask them why that is.",
            "output": [
                "WEATHER_CHECK"
            ]
        },
        {
            "input": "Bot's task: Ask the user to specify if they mean artist, song title, genre, etc. \nUser's task: Ask the bot to remove all the Bruce Springsteen songs from your 'All Australian Musicians' playlist",
            "output": [
                "EDIT_PLAYLIST"
            ]
        },
        {
            "input": "Bot's task: Ask the user to specify tallest vs widest vs heaviest. Try to think of other categories to bother the user about. \nUser's task: Try to use the bot to find out what the biggest recorded cloud of all time was.",
            "output": [
                "LOOK_UP_INFO"
            ]
        },
        {
            "input": "Bot's task: The user is worried that someone has meddled with their finances. Provide evidence that this is true (inform the user of large, suspicious purchases, recent changes to investments, etc).\\u00a0 \nUser's task: You are worried that someonehas hacked into your bank account and meddled with your finances. get the bot to ensure you that nothing is wrong",
            "output": [
                "BANK_BOT"
            ]
        },
        {
            "input": "Bot's task: Fulfil the user's request. \nUser's task: Ask the bot what you should call your new restaurant that serves Italian food catered to families",
            "output": [
                "NAME_SUGGESTER"
            ]
        },
        {
            "input": "Bot's task: Answer the user's question, but ask some questions first to help decide what song you want to suggest. \nUser's task: Ask what a good song to play at your wedding would be",
            "output": [
                "MUSIC_SUGGESTER"
            ]
        },
        {
            "input": "Bot's task: Give the user advice but ask them what kind of dog they have. \nUser's task: Ask how much dog food you should go through in one week",
            "output": [
                "PET_ADVICE"
            ]
        },
        {
            "input": "Bot's task: Ask the user to elaborate on their situation and then give them an answer. \nUser's task: Ask the bot if you should accept a promotion if it doesn't come with a rise in pay",
            "output": [
                "DECIDER_BOT"
            ]
        },
        {
            "input": "Bot's task: (pretend you are a bot that handles the catalogue at a karaoke bar) ask the user to specify artist and album before telling them whether the song they're asking about is in or not. \nUser's task: (pretend the bot handles the catalogue for a karaoke bar) ask the bot if Moondance is on the songs list",
            "output": [
                "CATALOGUE_BOT"
            ]
        }
    ]
}